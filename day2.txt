
from fastapi import FastAPI,HTTPException,status,APIRouter
from random import randrange
from . import schema

router= APIRouter(tags=["BOA USER APP"])

userData=[]

# reused search the user with specific ID
def searchUser(id):
    for i,v in enumerate(userData):
        if v['id']== id:
            return i

# get function which uses loadusers to load the userdata
@router.get("/loadusers")
def loadusers():
    return {'message':userData}

# search the user
@router.get("/loaduser/{id}")
def findUser(id:int):
    data=searchUser(id)
    if data ==None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail='Given ID not found')
    return {"User Details ": data}


# delete data
@router.delete("/deleteuser/{id}")
def deleteUser(id:int):
    data=searchUser(id)
    if data ==None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail='Given ID not found')
    userData.pop(data)
    return {"User Deleted ": data}

# update

@router.put("/updateuser/{id}")
def updateUser(id:int,udata:schema.User):
    data=searchUser(id)
    if data ==None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail='Given ID not found')
    post=udata.model_dump()
    post['id']=id
    userData[data]=post
    return {"User updated ": data}

# add function which uses adduser to add in the userdata
@router.post("/adduser",status_code=status.HTTP_201_CREATED)
def addUser(udata:schema.User):
    data= udata.model_dump()
    data['id']= randrange(0,10000)
    userData.append(data)
    return {"user details":data}
    



-----



from fastapi import FastAPI
from . import crudapp

app= FastAPI()

app.include_router(crudapp.router)
